# 변수를 먼저 설정합니다.
$myResourceGroup="hahaysh19rg"
$myKeyVault="hahaysh19kv"
$myLocation="eastus"


# 리소스 그룹을 만듭니다.
az group create --name $myResourceGroup --location $myLocation

# Key vault를 만듭니다.
az keyvault create --name $myKeyVault --resource-group $myResourceGroup --location $myLocation

# Secret추가하고 검색합니다.
# Secret을 만들고 앱에서 사용할 수 있는 암호를 추가해봅니다.
az keyvault secret set --vault-name $myKeyVault --name "ExamplePass" --value "P@ssw0rd1234"

# 생성된 secret을 검색해봅니다.
az keyvault secret show --name "ExamplePass" --vault-name $myKeyVault




dotnet new console -f netcoreapp3.1

dotnet add package Microsoft.Azure.KeyVault
dotnet add package Microsoft.IdentityModel.Clients.ActiveDirectory


===================
using System;
using System.Threading.Tasks;
using Microsoft.Azure.KeyVault; // dotnet add package Microsoft.Azure.KeyVault
using Microsoft.IdentityModel.Clients.ActiveDirectory; // dotnet add package Microsoft.IdentityModel.Clients.ActiveDirectory


namespace DemoKeyVault
{
    class Program
    {

        const string CLIENTSECRET = "ZERG";
        const string CLIENTID = "ZERG";
        const string secretUri = "https://hahaysh01kv.vault.azure.net/secrets/ExamplePass";

        public static async Task Main(string[] args)

        {

            // # Key Vault 클라이언트 만들기
            var client = new KeyVaultClient(new KeyVaultClient.AuthenticationCallback(GetToken));
            // 비밀 얻기
            var secretBundle = await client.GetSecretAsync(secretUri);
            // 비밀의 값 얻기
            var secret = secretBundle.Value;
            Console.WriteLine("Hello World!");
            Console.WriteLine(secret.ToString());

        }

        //# 등록한 앱을 통해서 Key를 접근하기위한 Token생성하기
        public static async Task<string> GetToken(string authority, string resource, string scope)
        {
            var authContext = new AuthenticationContext(authority);
            ClientCredential clientCred = new ClientCredential(CLIENTID, CLIENTSECRET);
            AuthenticationResult result = await authContext.AcquireTokenAsync(resource, clientCred);
            if (result == null)
                throw new InvalidOperationException("Failed to obtain the JWT token");
            return result.AccessToken;
        }

    }
}

===================

az identity create --resource-group hahaysh19rg --name hahaysh19id

resourceID=$(az identity show --resource-group hahaysh19rg --name hahaysh19id --query id --output tsv)

az webapp identity assign -g hahaysh19rg -n hahaysh19webapp --identities [system] $resourceID



